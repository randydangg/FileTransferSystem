/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author YiLing
 */
public class Sender extends javax.swing.JFrame {
	public static final int TIMEOUT = 10000;
	private static int ackCount = 0;
	private DatagramSocket socket = null;
	private DatagramSocket socket2 = null;
	private InetAddress receiverIP = null;
	private DatagramPacket sendPacket;
	private DatagramPacket ackPacket;
	private static long startTime = 0, endTime = 0, elapsedTime = 0;
	private static int numPackets = 0;
	// The port that Sender receives things from the receiver on
	private byte[] sendData = new byte[128];
	private byte[] receiveData = new byte[128];
	private Path path = null;
	private byte[] data;
	// structure of ack: 0: seq no, 1: data receive size, 2: mds
	private byte[] ack = new byte[4];

	private String filename = "";
	private String ipAddress = "";
	private int mds = 0, desPort = 0, srcPort = 0;

	/**
	 * Creates new form Sender
	 */
	public Sender() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		ipLabel = new javax.swing.JLabel();
		destPortLabel = new javax.swing.JLabel();
		srcPortLabel = new javax.swing.JLabel();
		fileLabel = new javax.swing.JLabel();
		mdsLabel = new javax.swing.JLabel();
		timeoutLabel = new javax.swing.JLabel();
		ipInput = new javax.swing.JTextField();
		destPortInput = new javax.swing.JTextField();
		srcPortInput = new javax.swing.JTextField();
		fileInput = new javax.swing.JTextField();
		mdsInput = new javax.swing.JTextField();
		transferButton = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		transTimeText = new javax.swing.JTextArea();
		timeOut = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Sender"));
		ipLabel.setText("IP Address:");
		destPortLabel.setText("Destination Port:");
		srcPortLabel.setText("Source Port:");
		fileLabel.setText("File:");
		mdsLabel.setText("Max Datagram Size:");
		timeoutLabel.setText("Timeout: ");

		ipInput.setText("192.168.232.1");
		destPortInput.setText("1080");
		srcPortInput.setText("1072");
		mdsInput.setText("127");
		fileInput.setText("test.txt");
		// ipInput.addActionListener(new java.awt.event.ActionListener() {
		// @Override
		// public void actionPerformed(java.awt.event.ActionEvent evt) {
		// ipInputActionPerformed(evt);
		// }
		// });

		transferButton.setText("TRANSFER");
		transferButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent e) {
				try {
					transferButtonActionPerformed(e);
				} catch (SocketException e1) {
					System.out.println("Socket exception.");
					e1.printStackTrace();
				} catch (UnknownHostException e1) {
					System.out.println("Host exception.");
					e1.printStackTrace();
				}
			}
		});

		transTimeText.setColumns(20);
		transTimeText.setRows(5);
		transTimeText.setText("Total Transmission Time: ");
		transTimeText.setEditable(false);
		jScrollPane1.setViewportView(transTimeText);

		timeOut.setText(TIMEOUT + " ms");

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout
				.setHorizontalGroup(
						jPanel1Layout.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanel1Layout
										.createSequentialGroup().addContainerGap()
										.addGroup(
												jPanel1Layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
														.addGroup(jPanel1Layout.createSequentialGroup()
																.addGap(0, 0, Short.MAX_VALUE).addComponent(mdsInput,
																		javax.swing.GroupLayout.PREFERRED_SIZE, 189,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
														.addGroup(
																javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout
																		.createSequentialGroup().addComponent(
																				srcPortLabel)
																		.addGap(79, 79, 79).addComponent(srcPortInput))
														.addGroup(javax.swing.GroupLayout.Alignment.LEADING,
																jPanel1Layout.createSequentialGroup()
																		.addComponent(fileLabel)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE)
																		.addComponent(fileInput,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				189,
																				javax.swing.GroupLayout.PREFERRED_SIZE))
														.addGroup(javax.swing.GroupLayout.Alignment.LEADING,
																jPanel1Layout.createSequentialGroup()
																		.addComponent(destPortLabel).addGap(48, 48, 48)
																		.addComponent(destPortInput))
														.addGroup(javax.swing.GroupLayout.Alignment.LEADING,
																jPanel1Layout.createSequentialGroup()
																		.addGroup(jPanel1Layout
																				.createParallelGroup(
																						javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(mdsLabel)
																				.addGroup(jPanel1Layout
																						.createSequentialGroup()
																						.addComponent(timeoutLabel)
																						.addGap(97, 97, 97)
																						.addComponent(timeOut))
																				.addGroup(jPanel1Layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.TRAILING,
																								false)
																						.addComponent(transferButton)
																						.addGroup(jPanel1Layout
																								.createSequentialGroup()
																								.addComponent(ipLabel)
																								.addGap(84, 84, 84)
																								.addComponent(ipInput,
																										javax.swing.GroupLayout.PREFERRED_SIZE,
																										189,
																										javax.swing.GroupLayout.PREFERRED_SIZE))
																						.addComponent(jScrollPane1,
																								javax.swing.GroupLayout.Alignment.LEADING)))
																		.addGap(0, 0, Short.MAX_VALUE)))
										.addContainerGap(31, Short.MAX_VALUE)));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addContainerGap()
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(ipLabel).addComponent(ipInput, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(destPortLabel).addComponent(destPortInput,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(srcPortLabel).addComponent(srcPortInput,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(fileLabel).addComponent(fileInput, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(mdsLabel).addComponent(mdsInput, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(timeoutLabel).addComponent(timeOut))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 65,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(14, 14, 14).addComponent(transferButton).addContainerGap(21, Short.MAX_VALUE)));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jPanel1,
						javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addContainerGap()));

		pack();
	}// </editor-fold>

	// private void ipInputActionPerformed(java.awt.event.ActionEvent evt) {
	// // TODO add your handling code here:
	// }

	private void transferButtonActionPerformed(java.awt.event.ActionEvent evt)
			throws SocketException, UnknownHostException {
		ipAddress = ipInput.getText();
		filename = fileInput.getText();

		try {
			desPort = Integer.parseInt(destPortInput.getText());
			srcPort = Integer.parseInt(srcPortInput.getText());
			mds = Integer.parseInt(mdsInput.getText()); // size of datagram
			if (mds > 128) {
				System.out.println("Size too large. mds = 128");
				mds = 128;
			} else if (mds < 1) {
				System.out.println("Size too small. mds = 1");
				mds = 1;
			}
			receiverIP = InetAddress.getByName(ipAddress);
			socket = new DatagramSocket();
			socket2 = new DatagramSocket(desPort);
			handshake();
		} catch (SocketException se) {
			// do nothing
			System.out.println("Socket fail");
		} catch (NumberFormatException nfe) {
			System.out.println("Port numbers must be integers");
		} catch (UnknownHostException uhe) {
			System.out.println("Unknown host");
		} catch (IOException ioe) {
			System.out.println("Error in send/receive");
		}

		// system.timeinmillis() to keep track of time

		// our packets have the sequence number, the ack, and the rest of the
		// data
		// remember to take into account the mds
	}

	private void handshake() throws IOException {

		transferButton.setEnabled(false);
		startTime = System.currentTimeMillis();

		byte seq = -1;
		sendData[0] = seq; // sequence number
		sendData[1] = (byte) 0; // data receive size
		sendData[2] = (byte) mds; // max datagram size
		DatagramPacket initPacket = new DatagramPacket(sendData, sendData.length, receiverIP, srcPort);
		// ack[0] = 1;
		try {
			// send up to (mds - 4) bytes of data
//			System.out.println("Sending handshake packet");
//			System.out.println(receiverIP);
//			System.out.println(desPort);
//			System.out.println(srcPort);
			socket.send(initPacket);
			// receive ack byte array of length 

		} catch (IOException ioe) {
			System.out.println("Error in send/receive");
			ioe.printStackTrace();
		}
		
		ackPacket = new DatagramPacket(ack, ack.length);
		
		try {
			socket2.receive(ackPacket);
			receiveData = ackPacket.getData();
			if (receiveData[0] == -1) {
				// if ack sent back is 0 then
				System.out.println("Ack received. Ready to send file.");
				// copy the received data into the ack array
				// System.arraycopy(receiveData, 0, ack, 0, 4);
				readFile();
			}
		}
		catch (IOException ioe) {
			System.out.println("Error in send/receive");
			ioe.printStackTrace();
		}

		// DatagramPacket responsePacket = new DatagramPacket(recieveData,
		// recieveData.length);
		//
		// try {
		// //System.out.println("waiting for packet");
		//
		// connectionSocket.receive(initPacket);
		// recieveData = initPacket.getData();
		// //System.out.println("packet recieved");
		// }

	}

	private void readFile() {
		// FIND OUT WHAT ACK[] IS
		// AND WHAT BUF IS
		path = Paths.get(filename);
//		System.out.println("Preparing to send file");
		try {

			// convert file to bytes
			data = Files.readAllBytes(path); // Convert file to bytes
			numPackets = data.length / (mds - 4); // number of packets will
													// equal to size of data
													// divided by buffer size

			// set this ack to 1 to indicate next packet
			ack[0] = 0;
			// transfer
			socket2.setSoTimeout(TIMEOUT);
			
//			System.out.println("Preparing to send file");
			for (int i = 0; i < numPackets; i++) {
				// arraycopy(source_arr, int sourcePos, dest_arr, int destPos,
				// int num of copied items)

				// this line is for first 4 bytes
				System.arraycopy(ack, 0, sendData, 0, 4);
				// this line is for the rest of the data
				// moves the data forward 124 bytes
				System.arraycopy(data, ackCount * (mds - 4), sendData, 4, (mds - 4));

				sendPacket = new DatagramPacket(sendData, sendData.length, receiverIP, srcPort);
				try {
					// send the data packet
					socket.send(sendPacket);
					System.out.println(
							"Sent bytes: " + ackCount * (mds - 4) + " to " + (ackCount * (mds - 4) + (mds - 4)));
					socket2.receive(ackPacket);
					// System.out.println("Sent:" + ack[0]);

					// if ack is expected ack, then switch
					// ackcount keeps track of
					// how to implement checksum?
					if (ackPacket.getData()[0] == ack[0]) {
						ack[0] = ack_switch(ack[0]);
					} else {
						// if the wrong ack is received,
						// would we need to go back in the loop
						// to ensure
						// i--; ?
					}

				} catch (SocketTimeoutException e) {
					// if there is a timeout, then go back to previous ack
					// previous ack will be sent
					i--;
				} catch (IOException ex) {
					System.out.println("IO Exception");
					// Logger.getLogger(Sender.class.getName()).log(Level.SEVERE,
					// null, ex);
				}

			}
		} catch (IOException e) {
			System.err.println("IO exception. Terminating program");
			e.printStackTrace();
			System.exit(0);
		}
		// DatagramPacket sendPacket = new DatagramPacket();

		// end of transmission, ack = 2
		endOfTransmission();
		// transferButton.setEnabled(true);

	}

	private static byte ack_switch(byte ack) {
		if (ack == 0) {
			ack = 1;
		} else {
			ack = 0;
		}
		ackCount++;
		return ack;
	}

	private void endOfTransmission() {
		byte[] sendData2 = new byte[data.length - ackCount * (mds - 4) + 4];
		ack[0] = 2; // seq number 2 indicates EOT
		ack[1] = (byte) (data.length - ackCount * (mds - 4));
		System.arraycopy(ack, 0, sendData2, 0, 4);
		System.arraycopy(data, ackCount * (mds - 4), sendData2, 4, data.length - ackCount * (mds - 4));
		DatagramPacket sendPacket = new DatagramPacket(sendData2, sendData2.length, receiverIP, srcPort);
//		System.out.println("Preparing to send file");
//		System.out.println(sendData2.length);
		try {
			socket.send(sendPacket);
//			System.out.println("packet sent");
			socket2.receive(ackPacket);
		} catch (IOException ex) {
			Logger.getLogger(Sender.class.getName()).log(Level.SEVERE, null, ex);
		}
		endTime = System.currentTimeMillis();
		elapsedTime = endTime - startTime;
//		transTimeText.setText(transTimeText.getText() + ' ' + String.format("%.4f s", elapsedTime / 1000));
		// System.out.println("Sent:" + ack[0]);
		// System.out.println("packet total:" + packetTotal);
		socket.close();
		socket2.close();
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting
		// code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.
		 * html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Sender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Sender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Sender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Sender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new Sender().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JTextField destPortInput;
	private javax.swing.JLabel destPortLabel;
	private javax.swing.JTextField fileInput;
	private javax.swing.JLabel fileLabel;
	private javax.swing.JTextField ipInput;
	private javax.swing.JLabel ipLabel;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextField mdsInput;
	private javax.swing.JLabel mdsLabel;
	private javax.swing.JTextField srcPortInput;
	private javax.swing.JLabel srcPortLabel;
	private javax.swing.JLabel timeOut;
	private javax.swing.JLabel timeoutLabel;
	private javax.swing.JTextArea transTimeText;
	private javax.swing.JButton transferButton;
	// End of variables declaration
}

